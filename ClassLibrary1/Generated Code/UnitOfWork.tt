<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Reflection" #>
<#@ import namespace="System.Reflection" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ assembly name="C:\Users\micha\source\repos\CAMM2\CAMM2.Repository\bin\Debug\Domain.dll" #>
<#@ import namespace="Domain.Items" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
    var item = new Item();
    Type[] typelist = GetTypesInNamespace(Assembly.GetAssembly(item.GetType()), "Domain.Items");
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Application.Interfaces;
using Persistance;

namespace Persistance
{
    public class UnitOfWork : IUnitOfWork
    {
        private readonly Camm2Context _context;

        public UnitOfWork(Camm2Context context)
        {
            _context = context;
<#  
    for (int i = 0; i < typelist.Length; i++)
    {
#>
            <#=typelist[i].Name#>s = new <#=typelist[i].Name#>Repository(_context);            
<#
    }
#>
        }

<#  
    for (int i = 0; i < typelist.Length; i++)
    {
#>
        public I<#=typelist[i].Name#>Repository <#=typelist[i].Name#>s { get; private set; }        
<#
    }
#>
        public int Complete()
        {
            return _context.SaveChanges();
        }

        public void Dispose()
        {
            _context.Dispose();
        }
    }
}

<#+

    private Type[] GetTypesInNamespace(Assembly assembly, string nameSpace)
    {
        var types = assembly.GetTypes();

        return assembly.GetTypes()
            .Where(t => !String.Equals(t.BaseType.Name, "Enum", StringComparison.Ordinal) && !t.Name.Contains("Base"))
            .ToArray();
    }

 #>