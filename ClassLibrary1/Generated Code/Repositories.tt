<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#	
	string currentDirectory = System.IO.Path.GetDirectoryName(this.Host.TemplateFile);
	int Camm2Index = currentDirectory.IndexOf("CAMM2\\");
	string solutionRootDirectory = currentDirectory.Substring(0,Camm2Index);

	string CammXml = File.ReadAllText(solutionRootDirectory + "CAMM2\\CAMM2.Repository\\CAMM2Model.xml");	 
	
 	System.Xml.Linq.XDocument XmlDocu = System.Xml.Linq.XDocument.Parse(CammXml);
	var xmlClasses  = XmlDocu.Root.Elements("class").Select(xx => xx).ToList();
#>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Linq.Dynamic;
using System.Threading.Tasks;
using Persistance.Repository;
using Domain;
using Application;
using Application.Interfaces;

namespace Persistance
{
<#
foreach (var aClass in xmlClasses) 
{
	string className = aClass.Element("name").Value;
	string classNamePlural = aClass.Element("name").Value;
	if(className.EndsWith("y"))
	{
		classNamePlural = classNamePlural.TrimEnd('y');
		classNamePlural += "ie";
	}
	var properties = aClass.Elements("property").Select(ww => ww).ToList();
	var typesString = properties.Elements("type").Where(t => t.Value == "string").Select(t => t).ToList();
	var propertiesTypesString = typesString.Ancestors("property").ToList();

	var p = 1;
#>
    public class <#=className#>Repository : Repository<<#=className#>>, I<#=className#>Repository
    {
        public <#=className#>Repository(Camm2Context context)
            :base(context)
        {
        }
<# if(propertiesTypesString.Count > 0){ #>               
        public IEnumerable<<#=className#>> Search(SearchParameters searchParams)
        {
            var query = Camm2Context.<#=classNamePlural#>s.AsQueryable();

            if (!String.IsNullOrEmpty(searchParams.SearchValue))
            {
                string[] terms = searchParams.SearchValue.Split(' ');

                foreach (string term in terms)
                {
                    query = query.Where(q =>
<#
	var firstProp = true;
	foreach(var prop in propertiesTypesString)
    {
		var propertyName = prop.Element("name").Value;
		if(firstProp)
        {
#>
					q.<#=propertyName#>.Contains(term)
<#
			firstProp = false;
        }
		else
        {
#>
					|| q.<#=propertyName#>.Contains(term)
<#
        }

    } 
#>					);					
                }
            }

            query = query.OrderBy(searchParams.SortColumnName + " " + searchParams.SortDirection);
            query = query.Skip(searchParams.Start).Take(searchParams.Length);

            return query.ToList();
        }
<# } #>
        public Camm2Context Camm2Context
        {
            get { return Context as Camm2Context; }
        }
    }

<#
}
#>
}
