<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="..\..\Application\T4Library.t4" #>
<#
var xmlClasses = GetClasses("CAMM2\\CAMM2.Repository\\CAMM2Model.xml");
#>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Linq.Dynamic;
using System.Threading.Tasks;
using Persistance.Repository;
using Domain;
using Application;
using Application.Interfaces;

namespace Persistance
{
<#
foreach (var aClass in xmlClasses) 
{
	string className = GetName(aClass);
	if(className == "Base")
		continue;
	string classNamePlural = GetNamePluralVersion(aClass);
	var properties = GetProperties(aClass);	
	var propertiesTypesString = GetPropertiesOfTypeString(aClass);

#>
    public class <#=className#>RepositoryBase : Repository<<#=className#>>, I<#=className#>RepositoryBase
    {
        public <#=className#>RepositoryBase(Camm2Context context)
            :base(context)
        {
        }
<# if(propertiesTypesString.Count > 0){ #>               
        public IEnumerable<<#=className#>> Search(SearchParameters searchParams)
        {
            var query = Camm2Context.<#=classNamePlural#>s.AsQueryable();

            if (!String.IsNullOrEmpty(searchParams.SearchValue))
            {
                string[] terms = searchParams.SearchValue.Split(' ');

                foreach (string term in terms)
                {
                    query = query.Where(q =>
<#
	var firstProp = true;
	foreach(var prop in propertiesTypesString)
    {
		var propertyName = GetName(prop);
		if(firstProp)
        {
#>
					   q.<#=propertyName#>.Contains(term)
<#
			firstProp = false;
        }
		else
        {
#>
					|| q.<#=propertyName#>.Contains(term)
<#
        }

    } 
#>					);					
                }
            }

            query = query.OrderBy(searchParams.SortColumnName + " " + searchParams.SortDirection);
            query = query.Skip(searchParams.Start).Take(searchParams.Length);

            return query.ToList();
        }
<# } #>
        public Camm2Context Camm2Context
        {
            get { return Context as Camm2Context; }
        }
    }

<#
}
#>
}
