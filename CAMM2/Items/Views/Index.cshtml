@model Application.Items.ItemVM
@using Domain.Items
@using Application.Items
@using System.ComponentModel;
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using Newtonsoft.Json;
@using System;

@{
    ViewBag.Title = "Items";
}

<div class="search">
    <div class="row" style="margin-bottom:5mm">
        <div class="col-sm-3">
            @Html.TextBox("searchbox", "", new { @autofocus = "autofocus", @data_bind = "value:searchstring", @class = "form-control", @placeholder = "multiple keyword search" })
        </div>
        <div class="col-sm-1">
            <input type="button" class="btn btn-warning" style="width:80px" value="Search" data-bind="click: search" />
        </div>
    </div>
    <div>
        <table id="searchResultsTable" class="table table-striped table-bordered" typeof="display" style="width:100%"></table>
    </div>
</div>

<div class="form-horizontal card" style="margin-top:5mm">
    <div>
        <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
            <h4 style="margin-left:3mm; margin-right:3mm; margin-top:2mm">Details</h4>
            <div class="btn-group mr-4" role="group" aria-label="First group">
                <button type="button" class="btn btn-primary" id="addBtn" data-bind="click: add, enable: enableAddButton ">Add</button>
                <button type="button" class="btn btn-primary" id="editBtn" data-bind="click: update, enable: enableEditButton">Edit</button>
                <button type="button" class="btn btn-primary" id="deleteBtn" data-bind="click: deleteItem, enable: enableDeleteButton">Delete</button>
                <button type="button" class="btn btn-primary" id="cancelBtn" data-bind="click: cancel, enable: enableCancelButton">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveBtn" data-bind="click: save, enable: enableSaveButton, text: SaveBtnText">Save</button>
            </div>
            <h4 id="deleteMessage" style="margin-left:3mm; margin-right:3mm; margin-top:2mm" data-bind="visible: showDeleteMessage">Click "Cancel" to abort. Click "Confirm" to delete.</h4>
        </div>
    </div>
    <div id="validationSummary">
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
    </div>
    <form id="addeditform">
        @Html.AntiForgeryToken()
        <div class="card-body" data-bind="with:Item">
            <div class="row" style="margin-bottom:5mm; margin-right:5mm">
                @foreach (var p in typeof(ItemVM).GetProperties())
                {
                    var displayName = p.Name;
                    var displayAttr = p.GetCustomAttribute(typeof(DisplayAttribute)) as DisplayAttribute;
                    if (displayAttr != null)
                    {
                        displayName = displayAttr.Name;
                    }

                    var hidden = false;
                    var hiddenInput = p.GetCustomAttribute(typeof(HiddenInputAttribute)) as HiddenInputAttribute;
                    if (hiddenInput != null)
                    {
                        hidden = !hiddenInput.DisplayValue;
                    }

                    if (hidden)
                    {
                        <input name=@p.Name type="hidden" data-bind="value: @p.Name" />
                    }

                    if (hidden)
                    { continue; }

                    var readOnly = false;
                    var readOnlyAttr = p.GetCustomAttribute(typeof(ReadOnlyAttribute)) as ReadOnlyAttribute;
                    if (readOnlyAttr != null)
                    {
                        readOnly = readOnlyAttr.IsReadOnly;
                    }

                    if (p.PropertyType == typeof(string))
                    {
                        <div class="camm-control-group">

                            @Html.Label(p.Name, displayName, htmlAttributes: new { @class = "control-label col-sm-12" })
                            @Html.Editor(p.Name, new { htmlAttributes = new { @class = "form-control col-sm-12", @data_bind = "value: " + p.Name + ", enable: $parent.enableEditableTextBoxes" } })
                            @Html.ValidationMessage(p.Name, "", new { @class = "text-danger", @style = "width: 100%; text-align:center;" })

                        </div>
                    }

                    if (p.PropertyType.BaseType == typeof(Enum))
                    {
                        <div class="camm-control-group">

                            @Html.Label(p.Name, displayName, htmlAttributes: new { @class = "control-label" })
                            <select class="form-control" data-bind="options: unitsOfMeasureList, optionsText: 'name', optionsValue: 'id', value: selectedUOM, enable: $parent.enableEditableTextBoxes"></select>
                            @*@Html.DropDownList(p.Name, new SelectList(Enum.GetValues(typeof(UnitsOfMeasure))), new { @class = "form-control", @data_bind = "value:" + p.Name + ", enable: $parent.enableEditableTextBoxes, selected: " + p.Name + " " })*@
                            @Html.ValidationMessage(p.Name, "", new { @class = "text-danger", @style = "width: 100%; text-align:center;" })

                        </div>
                    }


                    if (p.PropertyType == typeof(int))
                    {
                        <div class="camm-control-group-sm">

                            @Html.Label(p.Name, displayName, htmlAttributes: new { @class = "control-label" })
                            @Html.Editor(p.Name, new { htmlAttributes = new { @class = "form-control", @data_bind = "value:" + p.Name + ", enable: $parent.enableEditableTextBoxes" } })
                            @Html.ValidationMessage(p.Name, "", new { @class = "text-danger", @style = "width: 100%; text-align:center;" })

                        </div>
                    }

                    if (p.PropertyType == typeof(DateTime))
                    {
                        <div class="camm-control-group">
                            <label class="control-label" for="@p.Name">@displayName</label>
                            <input class="form-control datepicker" data-bind="value: @p.Name, enable: @if (readOnly) { <text>false</text> } else { <text>$parent.enableEditableTextBoxes</text> } " 
                                   data-val="true" data-val-date="The field @displayName must be a date." data-val-required="The @displayName field is required." 
                                   id="@p.Name" name="@p.Name" value="" disabled="" type="datetime">
                            <span class="field-validation-valid text-danger" data-valmsg-for="@p.Name" data-valmsg-replace="true" style="width: 100%; text-align:center;"></span>
                        </div>
                    }

                            }
            </div>
        </div>
    </form>
</div>

<style>
    .camm-control-group {
        margin-bottom: 20px;
    }
</style>

@section scripts{

    <script type="text/javascript">

        var viewModel = function() {
            var vm = this;
            vm.mode = ko.observable('Get');
            vm.Code = ko.observable();

            vm.Item = {
                Id: ko.observable(),
                Code: ko.observable(),
                Description: ko.observable(),
                UnitsOfMeasure: ko.observable(),
                QtyOnHand: ko.observable(),
                UpdateDate: ko.observable(new Date()),
                CreateDate: ko.observable(new Date()),
                unitsOfMeasureList: [{ "id": 1, "name": "Each" }, { "id": 2, "name": "Inches" }, { "id": 3, "name": "Feet" }, { "id": 4, "name": "Meters" }, { "id": 5, "name": "Ounces" }, { "id": 6, "name": "Pounds" },],
                selectedUOM: ko.observable()
            }

            vm.clearModel = function () {
                vm.Item.Id("");
                vm.Item.Code("");
                vm.Item.Description("");
                vm.Item.UnitsOfMeasure("");
                vm.Item.QtyOnHand("");
                vm.Item.UpdateDate(new Date());
                vm.Item.CreateDate(new Date());
                vm.Item.selectedUOM("");
            }

            vm.unitsOfMeasureList = [{ "id": 1, "name": "Each" }, { "id": 2, "name": "Inches" }, { "id": 3, "name": "Feet" }, { "id": 4, "name": "Meters" }, { "id": 5, "name": "Ounces" }, { "id": 6, "name": "Pounds" },]

            vm.searchstring = ko.observable();
            @* Execute search on searchbox value change*@
            vm.searchstring.subscribe(function (newValue) {
                if (vm.mode() === 'Get') {
                    vm.search();
                }
            });

            vm.search = function () {
                vm.selectedRow = "";
                vm.table.search(vm.searchstring()).draw();
            }

            vm.selectedRow = "";

            vm.configureTable = function (data) {
                if (vm.table) {
                    vm.table.destroy();
                }
                vm.table = $('#searchResultsTable').DataTable({
                    "ajax": {
                        "url": "SearchServerSide",
                        "type": "POST",
                        "datatype": "json"
                    },
                    "drawCallback": function (settings) {
                        var api = this.api();
                        if (vm.selectedRow === "") {
                            var newdata = api.rows({ page: 'current' }).data();
                            if (vm.mode() === 'Get') {
                                vm.loadDetails(newdata[0]);
                            }
                            api.rows(0).select();
                        }
                        else {
                            vm.selectedRow.select();
                        }
                    },
                    "columns": [
                        { data: "Id", name: "Id", title: "Id", visible: false },
                        { data: "Code", name: "Code", title: "Item Number" },
                        { data: "Description", name: "Description", title: "Description" },
                        { data: "UnitsOfMeasure", name: "UnitsOfMeasure", title: "UOM" },
                        { data: "QtyOnHand", name: "QtyOnHand", title: "Qty On Hand" }
                    ],
                    "searching": "true",
                    "serverSide": "true",
                    "order": [0, "asc"],
                    "processing": "true",
                    "language": {
                        "processing": "processing, please wait"
                    },
                    "select": "single",
                    "dom": '<"top"i>rt<"bottom"lp><"clear">'
                });

                @*Load selected row into details *@
                $('#searchResultsTable tbody').on('click', 'tr', function () {
                    var data = vm.table.row($(this)).data();
                    vm.loadDetails(data);
                });

            };

            vm.configureTable();

            vm.formatduedate = function (d) {
                if (d === null) {
                    return "";
                }
                var dateInt = parseInt(d.substring(6, 19));
                var duedate = new Date(dateInt);
                var year = duedate.getUTCFullYear();
                var month = duedate.getUTCMonth() + 1;
                var date = duedate.getUTCDate();
                var formatduedate = month + "/" + date + "/" + year;
                //return formatduedate;
                return duedate.toLocaleDateString();
            }

            vm.add = function () {
                vm.clearModel();
                vm.mode('Add');
            };

            vm.update = function () {
                vm.mode('Update');
            };

            vm.showDeleteMessage = ko.observable(false);
            vm.deleteItem = function () {
                vm.mode('Delete');
            };

            vm.SaveBtnText = ko.observable('Save');

            vm.cancel = function () {
                vm.mode('Get');
                vm.loadSelecteRowIntoDetails();
                vm.clearErrorMessagesAndHighLights();
            };

            vm.save = function () {
                $.blockUI();
                if (vm.mode() === 'Delete' || vm.mode() === 'Add') {
                    vm.selectedRow = "";
                }
                else {
                    vm.selectedRow = vm.table.rows({ selected: true });
                }

                @* Enable input so that value will be serialized *@
                if (vm.mode() === 'Update' || vm.mode() === 'Delete') {
                    vm.enableKeyTextBox(true);
                }
                vm.Item.UnitsOfMeasure(vm.Item.selectedUOM());
                var item = vm.Item;                
                var itemJson = ko.toJSON(item);               

                @* Reapply input disable *@
                if (vm.mode() === 'Update' || vm.mode() === 'Delete') {
                    vm.enableKeyTextBox(false);
                }

                $.ajax({
                    url: vm.mode(),
                    data: itemJson,
                    type: "POST",
                    dataType: "json",
                    contentType: "application/json",
                    success: function (response) {
                        $("label").removeClass("text-danger");
                        $("input").removeClass("is-invalid");
                        if (response.success === true) {
                            vm.table.draw();
                            vm.mode('Get');
                        }
                        else {
                            vm.displayValidationErrors(response.errors);
                            if (response.ErrorMessage != null) {
                                alert(response.ErrorMessage);
                            }
                        }
                        $.unblockUI();
                    },
                    error: function (response) {
                        $.unblockUI();
                        alert("Error saving data.");
                    }
                });
            }

            vm.displayValidationErrors = function(errors) {

                // find summary div
                var $summary = $("#validationSummary").find("[data-valmsg-summary=true]");

                // find the unordered list
                var $ul = $summary.find("ul");

                // Clear existing errors from DOM by removing all element from the list
                $ul.empty();

                $.each(errors, function (idx, validationError) {

                    if (validationError.PropertyName != "") {
                        @* Input box highlight *@
                        var element = $("form").find('#' + validationError.PropertyName);
                        element = element[0];
                        vm.highLightError(element, 'is-invalid');

                        @* Label highlight *@
                        element = $("label[for='" + validationError.PropertyName + "']");
                        vm.highLightError(element, 'text-danger');

                        @* Error message *@
                        var validationMessageElement = $('span[data-valmsg-for="' + validationError.PropertyName + '"]');
                        validationMessageElement.removeClass('field-validation-valid');
                        validationMessageElement.addClass('field-validation-error');
                        validationMessageElement.text(validationError.ErrorMessage);
                    }
                    else {
                        // Add all errors to the list
                        $("<li />").html(validationError.ErrorMessage).appendTo($ul);

                        // Add the appropriate class to the summary div
                        $summary.removeClass("validation-summary-valid")
                            .addClass("validation-summary-errors");
                    }

                });
            }

            vm.highLightError = function (element, errorClass) {
                element = $(element);
                element.addClass(errorClass);
            }

            vm.removeHighLight = function (element, errorClass) {
                element = $(element);
                element.removeClass(errorClass);
            }

            vm.clearErrorMessagesAndHighLights = function () {
                @* Clear message *@
                $(".field-validation-error").removeClass('field-validation-error').addClass('field-validation-valid');
                $(".field-validation-valid").text("");
                @* Remove highlight on textbox *@
                $(".is-invalid").removeClass('is-invalid');
                @* Change label to black *@
                $("label").removeClass('text-danger');
            };

            $("input").change(function () {
                if ($(this).hasClass("input-validation-error")) {
                    var element = $("form").find('#' + this.name);
                    element = element[0];
                    vm.highLightError(element, 'is-invalid')
                    element = $("label[for='" + this.name + "']");
                    vm.highLightError(element, 'text-danger');
                }
                else {
                    var element = $("form").find('#' + this.name);
                    element = element[0];
                    vm.removeHighLight(element, 'is-invalid')
                    element = $("label[for='" + this.name + "']");
                    vm.removeHighLight(element, 'text-danger');
                    var element = $("form").find('data-valmg-for+' + this.name);
                    element.text("");
                }
            });

            vm.loadSelecteRowIntoDetails = function () {
                vm.selectedRows = vm.table.rows({ selected: true }).data();
                var data = vm.selectedRows[0];
                vm.loadDetails(data);
            }

            vm.loadDetails = function (data) {
                if (data === undefined) {
                    vm.clearModel();
                    return;
                }
                vm.Item.Id(data["Id"]);
                vm.Item.Code(data["Code"]);
                vm.Item.Description(data["Description"]);
                vm.Item.UnitsOfMeasure(data["UnitsOfMeasure"]);
                vm.Item.QtyOnHand(data["QtyOnHand"]);
                vm.Item.CreateDate(vm.formatduedate(data["CreateDate"]));
                vm.Item.UpdateDate(vm.formatduedate(data["UpdateDate"]));
                vm.Item.selectedUOM(data["UnitsOfMeasure"]);
            };

            vm.enableKeyTextBox = ko.observable(false);
            vm.enableEditableTextBoxes = ko.observable(false);

            vm.enableAddButton = ko.observable(true);
            vm.enableEditButton = ko.observable(true);
            vm.enableDeleteButton = ko.observable(true);
            vm.enableCancelButton = ko.observable(false);
            vm.enableSaveButton = ko.observable(false);

            // Any change in vm.mode fires this function
            vm.mode.subscribe(function (newMode) {
                if (newMode === 'Get') {
                    @* Unblock search div *@
                    $('div.search').unblock();

                    vm.enableKeyTextBox(false);
                    vm.enableEditableTextBoxes(false);

                    vm.enableAddButton(true);
                    vm.enableEditButton(true);
                    vm.enableDeleteButton(true);
                    vm.enableCancelButton(false);
                    vm.enableSaveButton(false);
                    $(".btn-outline-primary").removeClass("btn-outline-primary"); @*remove any button highlights*@

                    vm.showDeleteMessage(false);
                    vm.SaveBtnText('Save');
                }
                if (newMode === 'Add') {
                    @* Block the search div *@
                    $('div.search').block({ message: null });

                    vm.enableKeyTextBox(true);
                    vm.enableEditableTextBoxes(true);

                    vm.enableAddButton(false);
                    vm.enableEditButton(false);
                    vm.enableDeleteButton(false);
                    vm.enableCancelButton(true);
                    vm.enableSaveButton(true);
                    $(".btn-outline-primary").removeClass("btn-outline-primary");
                    $("#addBtn").addClass("btn-outline-primary"); @*highlight the add button*@
                }
                if (newMode === 'Update') {
                    @* Block the search div *@
                    $('div.search').block({ message: null });

                    vm.enableKeyTextBox(false);
                    vm.enableEditableTextBoxes(true);

                    vm.enableAddButton(false);
                    vm.enableEditButton(false);
                    vm.enableDeleteButton(false);
                    vm.enableCancelButton(true);
                    vm.enableSaveButton(true);
                    $(".btn-outline-primary").removeClass("btn-outline-primary");
                    $("#editBtn").addClass("btn-outline-primary"); @*highlight the edit button*@
                }
                if (newMode === 'Delete') {
                    @* Block the search div *@
                    $('div.search').block({ message: null });

                    vm.enableKeyTextBox(false);
                    vm.enableEditableTextBoxes(false);

                    vm.enableAddButton(false);
                    vm.enableEditButton(false);
                    vm.enableDeleteButton(false);
                    vm.enableCancelButton(true);
                    vm.enableSaveButton(true);
                    $(".btn-outline-primary").removeClass("btn-outline-primary");
                    $("#deleteBtn").addClass("btn-outline-primary"); @*highlight the delete button*@

                    vm.showDeleteMessage(true);
                    vm.SaveBtnText('Confirm');
                }
            });
        }

        $(document).ready(function () {
            Itemmodel = new viewModel();
            ko.applyBindings(Itemmodel);
            $(".camm-control-group").addClass("col-lg-3 col-md-4 col-sm-6 col-xs-12");
            $(".camm-control-group-sm").addClass("col-lg-2 col-md-4 col-sm-6 col-xs-12");
        });



    </script>
}


