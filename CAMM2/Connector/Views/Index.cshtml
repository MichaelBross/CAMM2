@* Generated Code! Do not manually edit. Adjust template (ViewsGenerator.tt) to make changes to this file. *@
@using Application.Service
@using Presentation

@{
    ViewBag.Title = "Connector";
    var detailVM = new ConnectorDetailVM();
    var listVM = new ConnectorListVM();
}

    <div class="form-horizontal card" style="padding: 20px">
        <div class="search">
            <div class="row" style="margin-bottom:5mm">
                <div class="col-sm-3">
                    @Html.TextBox("searchbox", "", new { @autofocus = "autofocus", @style="max-width:100%; width:100%; padding-right:0px", @data_bind = "value:searchstring", @class = "form-control", @placeholder = "multiple keyword search" })
                </div>
                <div class="col-sm-1" style="text-align:left">
                    <input type="button" class="btn btn-warning" style="width:80px; padding-left:0px" value="Search" data-bind="click: search" />                    
                </div>
                <div class="col-sm-3">
                    <h2>@ViewBag.Title</h2>
                </div>
            </div>
            <div>
                <table id="searchResultsTable" class="table table-striped table-bordered" typeof="display" style="width:100%"></table>
            </div>
        </div>
    </div>

<div class="form-horizontal card" style="margin-top:5mm; padding: 20px; width:100%">
    @Html.AntiForgeryToken()
    <div>
        <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
            <h4 style="margin-left:3mm; margin-right:3mm; margin-top:2mm">Details</h4>
            <div class="btn-group mr-4" role="group" aria-label="First group">
                <button type="button" class="btn btn-primary" id="addBtn" data-bind="click: add, enable: enableAddButton ">Add</button>
                <button type="button" class="btn btn-primary" id="editBtn" data-bind="click: update, enable: enableEditButton">Edit</button>
                <button type="button" class="btn btn-primary" id="deleteBtn" data-bind="click: deleteItem, enable: enableDeleteButton">Delete</button>
                <button type="button" class="btn btn-primary" id="cancelBtn" data-bind="click: cancel, enable: enableCancelButton">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveBtn" data-bind="click: save, enable: enableSaveButton, text: SaveBtnText">Save</button>
            </div>
            <h4 id="deleteMessage" style="margin-left:3mm; margin-right:3mm; margin-top:2mm" data-bind="visible: showDeleteMessage">Click "Cancel" to abort. Click "Confirm" to delete.</h4>
        </div>
    </div>
   
    @ViewHelper.DetailsFromModel(detailVM, this)

</div>

@section scripts{

    <script type="text/javascript">

        var viewModel = function() {
            var vm = this;
            vm.mode = ko.observable('Get');
            vm.Code = ko.observable();
            
            @JavaScriptBuilder.JsonKoObject(detailVM)

            @Html.Raw(JavaScriptBuilder.SelectListsArray(detailVM))

            @Html.Raw(JavaScriptBuilder.ClearModelFunction(detailVM))

            @Html.Raw(JavaScriptBuilder.LoadDetailsFunction(detailVM))

            vm.searchstring = ko.observable();

            @* Execute search on searchbox value change*@
            vm.searchstring.subscribe(function (newValue) {
                if (vm.mode() === 'Get') {
                    vm.search();
                }
            });

            vm.search = function () {
                vm.selectedRow = "";
                vm.table.search(vm.searchstring()).draw();
            }

            vm.selectedRow = "";

            vm.configureTable = function (data) {
                if (vm.table) {
                    vm.table.destroy();
                }
                vm.table = $('#searchResultsTable').DataTable({
                    "ajax": {
                        "url": "SearchServerSide",
                        "type": "POST",
                        "datatype": "json"
                    },
                    "drawCallback": function (settings) {
                        var api = this.api();
                        if (vm.selectedRow === "") {
                            var newdata = api.rows({ page: 'current' }).data();
                            if (vm.mode() === 'Get') {
                                vm.loadDetails(newdata[0]);
                            }
                            api.rows(0).select();
                        }
                        else {
                            vm.selectedRow.select();
                        }
                    },
                    "columns": 
                        @Html.Raw(JavaScriptBuilder.TableColumns(listVM)),                    
                    "serverSide": true,
					"info": true,
					"lengthMenu": [[10, 20, 50, -1], [10, 20, 50, "All"]],					
                    "order": [0, "asc"],
                    "processing": true,
                    "language": {
                        "processing": "processing, please wait"
                    },
                    "select": "single",
                    "dom": '<"top"i>rt<"bottom"lp><"clear">'
                });

                @*Load selected row into details *@
                $('#searchResultsTable tbody').on('click', 'tr', function () {
                    var data = vm.table.row($(this)).data();
                    vm.loadDetails(data);
                });

            };

            vm.getEnumItemName = function (myEnum, value) {
                var enumListName = myEnum + "List";
                var enumList = vm[enumListName];
                var n = ko.utils.arrayFirst(enumList, function (i) {
                    return value === i.id;
                });
				if(n !== undefined){
					return n.name;
				}
				else{
					return "";
				}
            };

            vm.configureTable();

            vm.today = function () {
                var now = new Date();
                var dd = now.getDate();
                var mm = now.getMonth() + 1;
                var yyyy = now.getFullYear();

                //if (dd < 10) dd = '0' + dd;
                //if (mm < 10) mm = '0' + mm;

                return (mm + '/' + dd + '/' + yyyy);
            }

            vm.formatDate = function (d) {
                if (d === null) {
                    return "";
                }
                var dateInt = parseInt(d.substring(6, 19));
                var duedate = new Date(dateInt);
                return duedate.toLocaleDateString();
            }

            vm.add = function () {
                vm.clearModel();
                vm.mode('Add');
            };

            vm.update = function () {
                vm.mode('Update');
            };

            vm.showDeleteMessage = ko.observable(false);
            vm.deleteItem = function () {
                vm.mode('Delete');
            };

            vm.SaveBtnText = ko.observable('Save');

            vm.cancel = function () {
                vm.mode('Get');
                vm.loadSelecteRowIntoDetails();
                vm.clearErrorMessagesAndHighLights();
            };

            vm.save = function () {
                $.blockUI();
                if (vm.mode() === 'Delete' || vm.mode() === 'Add') {
                    vm.selectedRow = "";
                }
                else {
                    vm.selectedRow = vm.table.rows({ selected: true });
                }

                @* Enable input so that value will be serialized *@
                if (vm.mode() === 'Update' || vm.mode() === 'Delete') {
                    vm.enableKeyTextBox(true);
                }

                var item = vm.Item;
                var itemJson = ko.toJSON(item);

                @* Reapply input disable *@
                if (vm.mode() === 'Update' || vm.mode() === 'Delete') {
                    vm.enableKeyTextBox(false);
                }

                var token = $('[name=__RequestVerificationToken]').val();
                var headers = {};
                headers["__RequestVerificationToken"] = token;

                $.ajax({
                    url: vm.mode(),
                    headers: headers,
                    data:itemJson,
                    type: "POST",
                    dataType: "json",
                    contentType: "application/json",
                    success: function (response) {
                        $("label").removeClass("text-danger");
                        $("input").removeClass("is-invalid");
                        if (response.success === true) {
                            vm.table.draw();
                            vm.mode('Get');
                            vm.clearErrorMessagesAndHighLights();
                        }
                        else {
                            vm.displayValidationErrors(response.errors);
                            if (response.ErrorMessage != null) {
                                alert(response.ErrorMessage);
                            }
                        }
                        $.unblockUI();
                    },
                    error: function (response) {
                        $.unblockUI();
                        alert("Error saving data.");
                    }
                });
            }

            vm.displayValidationErrors = function(errors) {

                // find summary div
                var $summary = $("#validationSummary").find("[data-valmsg-summary=true]");

                // find the unordered list
                var $ul = $summary.find("ul");

                // Clear existing errors from DOM by removing all element from the list
                $ul.empty();

                $.each(errors, function (idx, validationError) {

                    if (validationError.PropertyName != "") {
                        @* Input box highlight *@
                        var element = $("form").find('#' + validationError.PropertyName);
                        element = element[0];
                        vm.highLightError(element, 'is-invalid');

                        @* Label highlight *@
                        element = $("label[for='" + validationError.PropertyName + "']");
                        vm.highLightError(element, 'text-danger');

                        @* Error message *@
                        var validationMessageElement = $('span[data-valmsg-for="' + validationError.PropertyName + '"]');
                        validationMessageElement.removeClass('field-validation-valid');
                        validationMessageElement.addClass('field-validation-error');
                        validationMessageElement.text(validationError.ErrorMessage);
                    }
                    else {
                        // Add all errors to the list
                        $("<li />").html(validationError.ErrorMessage).appendTo($ul);

                        // Add the appropriate class to the summary div
                        $summary.removeClass("validation-summary-valid")
                            .addClass("validation-summary-errors");
                    }

                });
            }

            vm.highLightError = function (element, errorClass) {
                element = $(element);
                element.addClass(errorClass);
            }

            vm.removeHighLight = function (element, errorClass) {
                element = $(element);
                element.removeClass(errorClass);
            }

            vm.clearErrorMessagesAndHighLights = function () {
                @* Clear message *@
                $(".field-validation-error").removeClass('field-validation-error').addClass('field-validation-valid');
                $(".field-validation-valid").text("");
                @* Remove highlight on textbox *@
                $(".is-invalid").removeClass('is-invalid');
                @* Change label to black *@
                $("label").removeClass('text-danger');
            };

            $("input").change(function () {
                if ($(this).hasClass("input-validation-error")) {
                    var element = $("form").find('#' + this.name);
                    element = element[0];
                    vm.highLightError(element, 'is-invalid')
                    element = $("label[for='" + this.name + "']");
                    vm.highLightError(element, 'text-danger');
                }
                else {
                    var element = $("form").find('#' + this.name);
                    element = element[0];
                    vm.removeHighLight(element, 'is-invalid')
                    element = $("label[for='" + this.name + "']");
                    vm.removeHighLight(element, 'text-danger');
                    var element = $("form").find('data-valmg-for+' + this.name);
                    element.text("");
                }
            });

            vm.loadSelecteRowIntoDetails = function () {
                vm.selectedRows = vm.table.rows({ selected: true }).data();
                var data = vm.selectedRows[0];
                vm.loadDetails(data);
            }

            vm.enableKeyTextBox = ko.observable(false);
            vm.enableEditableTextBoxes = ko.observable(false);

            vm.enableAddButton = ko.observable(true);
            vm.enableEditButton = ko.observable(true);
            vm.enableDeleteButton = ko.observable(true);
            vm.enableCancelButton = ko.observable(false);
            vm.enableSaveButton = ko.observable(false);

            // Any change in vm.mode fires this function
            vm.mode.subscribe(function (newMode) {
                if (newMode === 'Get') {
                    @* Unblock search div *@
                    $('div.search').unblock();

                    vm.enableKeyTextBox(false);
                    vm.enableEditableTextBoxes(false);

                    vm.enableAddButton(true);
                    vm.enableEditButton(true);
                    vm.enableDeleteButton(true);
                    vm.enableCancelButton(false);
                    vm.enableSaveButton(false);
                    $(".btn-outline-primary").removeClass("btn-outline-primary"); @*remove any button highlights*@

                    vm.showDeleteMessage(false);
                    vm.SaveBtnText('Save');
                }
                if (newMode === 'Add') {
                    @* Block the search div *@
                    $('div.search').block({ message: null });

                    vm.enableKeyTextBox(true);
                    vm.enableEditableTextBoxes(true);

                    vm.enableAddButton(false);
                    vm.enableEditButton(false);
                    vm.enableDeleteButton(false);
                    vm.enableCancelButton(true);
                    vm.enableSaveButton(true);
                    $(".btn-outline-primary").removeClass("btn-outline-primary");
                    $("#addBtn").addClass("btn-outline-primary"); @*highlight the add button*@
                }
                if (newMode === 'Update') {
                    @* Block the search div *@
                    $('div.search').block({ message: null });

                    vm.enableKeyTextBox(false);
                    vm.enableEditableTextBoxes(true);

                    vm.enableAddButton(false);
                    vm.enableEditButton(false);
                    vm.enableDeleteButton(false);
                    vm.enableCancelButton(true);
                    vm.enableSaveButton(true);
                    $(".btn-outline-primary").removeClass("btn-outline-primary");
                    $("#editBtn").addClass("btn-outline-primary"); @*highlight the edit button*@
                }
                if (newMode === 'Delete') {
                    @* Block the search div *@
                    $('div.search').block({ message: null });

                    vm.enableKeyTextBox(false);
                    vm.enableEditableTextBoxes(false);

                    vm.enableAddButton(false);
                    vm.enableEditButton(false);
                    vm.enableDeleteButton(false);
                    vm.enableCancelButton(true);
                    vm.enableSaveButton(true);
                    $(".btn-outline-primary").removeClass("btn-outline-primary");
                    $("#deleteBtn").addClass("btn-outline-primary"); @*highlight the delete button*@

                    vm.showDeleteMessage(true);
                    vm.SaveBtnText('Confirm');
                }
            });
        }

        $(document).ready(function () {
            Itemmodel = new viewModel();
            ko.applyBindings(Itemmodel);           
        });



    </script>
}

