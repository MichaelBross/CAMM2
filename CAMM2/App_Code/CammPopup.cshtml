@using System.Web.Mvc;
@using System.Web.Mvc.Html;
@using System.ComponentModel;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;
@using System;
@using Application.Service
@using Presentation

@helper LinkDocuments(System.Web.Mvc.WebViewPage page, string Name)
{
    <div class="modal fade" id="@(Name)" tabindex="-1" role="dialog" aria-labelledby="@(Name)" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document" style="max-width: 1200px">
            <div class="modal-content">
                <div class="modal-header" style="padding-bottom:0">
                    <div class="container">
                        <div class="row">
                            @CammInputs.ButtonInputCancelButton(page, "DocumentSearchBoxButton", "Search Documents")
                        </div>
                        <div class="row" style="padding-top:15px">
                            <h5 class="modal-title" id="exampleModalLongTitle">SELECT EXISTING DOCUMENT TO ADD</h5>
                        </div>
                    </div>
                </div>
                <div class="modal-body">
                    @CammGrid.SearchGrid(page, new DocumentListVM(), "DocumentSearchGrid", "/Document/SearchServerSide")
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-primary" data-dismiss="modal">Close</button>
                    <button onclick="@(Name).AddSelectedDocument()" type="button" class="btn btn-outline-primary">Apply Selected Documents</button>
                </div>
            </div>
        </div>
    </div>

    <script>

        function @(Name)() {

            self = this;

            self.Type = "";
            self.TypeId = 0;

            self.AddSelectedDocument = function() {

                if (self.Type === "" || self.Type === 0) {
                    return;
                }

                var ids = DocumentSearchGrid.GetSelectedRows();

                $.ajax({
                    "url": "/Document/LinkDocuments",
                    "data": $.param({ "type": self.Type, "typeId": self.TypeId, "documentIdList": ids }, true),
                    "success": function () {
                        try {
                            @(Name)_HandleDocumentsLinked();
                        } catch (e) { }
                    }
                })
            }
        }

        var @Name = new @(Name)();

        function DocumentSearchBoxButton_HandleClick(searchTerm) {
            DocumentSearchGrid.search(searchTerm);
        }

    </script>
}

@helper Message(System.Web.Mvc.WebViewPage page, string Name, string Title = "", string Message = "")
{
    <div class="modal fade" id="@(Name)" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header" style="padding-bottom:0">
                    <div class="container">
                        <div class="row" style="padding-top:15px">
                            <h5 class="modal-title" id="@(Name)Title">@(Title)</h5>
                        </div>
                    </div>
                </div>
                <div class="modal-body">
                    <p id="@(Name)Message">@Message</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-primary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <script>

        @(Name) = function() {

            var self = this;

            self.Show = function(title = "", message = ""){

                if(title !== "")
                    $("#@(Name)Title").html(title);

                if(message !== "")
                    $("#@(Name)Message").html(message);

                $('#@(Name)').modal('show');
            };
        }

        @Name = new @(Name)();

    </script>
}

@helper LinkTools(System.Web.Mvc.WebViewPage page, string Name)
{
    <div class="modal fade" id="@(Name)" tabindex="-1" role="dialog" aria-labelledby="@(Name)" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="tool" style="max-width: 1200px">
            <div class="modal-content">
                <div class="modal-header" style="padding-bottom:0">
                    <div class="container">
                        <div class="row">
                            @CammInputs.ButtonInputCancelButton(page, "ToolSearchBoxButton", "Search Tools")
                        </div>
                        <div class="row" style="padding-top:15px">
                            <h5 class="modal-title" id="exampleModalLongTitle">SELECT EXISTING DOCUMENT TO ADD</h5>
                        </div>
                    </div>
                </div>
                <div class="modal-body">
                    @CammGrid.SearchGrid(page, new ToolListVM(), "ToolSearchGrid", "/Tool/SearchServerSide")
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-primary" data-dismiss="modal">Close</button>
                    <button onclick="@(Name).AddSelectedTool()" type="button" class="btn btn-outline-primary">Apply Selected Tools</button>
                </div>
            </div>
        </div>
    </div>

    <script>

        function @(Name)() {

            self = this;

            self.Type = "";
            self.TypeId = 0;

            self.AddSelectedTool = function() {

                if (self.Type === "" || self.Type === 0) {
                    return;
                }

                var ids = ToolSearchGrid.GetSelectedRows();

                $.ajax({
                    "url": "/Tool/LinkTools",
                    "data": $.param({ "type": self.Type, "typeId": self.TypeId, "toolIdList": ids }, true),
                    "success": function () {
                        try {
                            @(Name)_HandleToolsLinked();
                        } catch (e) { }
                    }
                })
            }
        }

        var @Name = new @(Name)();

        function ToolSearchBoxButton_HandleClick(searchTerm) {
            ToolSearchGrid.search(searchTerm);
        }

    </script>
}

@helper LinkItems(System.Web.Mvc.WebViewPage page, string Name)
{
    <div class="modal fade" id="@(Name)" tabindex="-1" role="dialog" aria-labelledby="@(Name)" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="item" style="max-width: 1200px">
            <div class="modal-content">
                <div class="modal-header" style="padding-bottom:0">
                    <div class="container">
                        <div class="row">
                            @CammInputs.ButtonInputCancelButton(page, "ItemSearchBoxButton", "Search Items")
                        </div>
                        <div class="row" style="padding-top:15px">
                            <h5 class="modal-title" id="exampleModalLongTitle">SELECT EXISTING DOCUMENT TO ADD</h5>
                        </div>
                    </div>
                </div>
                <div class="modal-body">
                    @CammGrid.SearchGrid(page, new ItemListVM(), "ItemSearchGrid", "/Item/SearchServerSide")
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-primary" data-dismiss="modal">Close</button>
                    <button onclick="@(Name).AddSelectedItem()" type="button" class="btn btn-outline-primary">Apply Selected Items</button>
                </div>
            </div>
        </div>
    </div>

    @CammPopup.Message(page, Name + "Message")

    <script>

        function @(Name)() {

            self = this;

            self.Type = "";
            self.TypeId = 0;

            self.AddSelectedItem = function() {
                               
                var ids = ItemSearchGrid.GetSelectedRows();

                $.ajax({
                    "url": "LinkItems",
                    "data": $.param({ "assemblyId": self.TypeId, "itemIdList": ids }, true),
                    "success": function () {
                        try {
                            @(Name)_HandleItemsLinked();
                        } catch (e) { }
                    },
                    "error" : @(Name)Message("Link Item", "Linking action failed.")
                })
            }
        }

        var @Name = new @(Name)();

        function ItemSearchBoxButton_HandleClick(searchTerm) {
            ItemSearchGrid.search(searchTerm);
        }

    </script>
}