
@using System.Web.Mvc;
@using System.Web.Mvc.Html;
@using System.ComponentModel;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;
@using System;
@using Application.Service
@using Presentation

@helper SearchGrid(System.Web.Mvc.WebViewPage page, object listVM, string Name, string searchMethod)
{
    var Html = page.Html;

    <table id="@(Name)" class="table table-striped table-bordered" typeof="display" style="width:100%"></table>

    <script>
        var @Name = function() {
            vm = this;

            vm.searchstring = "";

            vm.search = function (searchTerm) {
                vm.selectedRow = "";
                vm.table.search(searchTerm).draw();
            }

            vm.selectedRow = "";
            vm.selectedRowList = "";
            vm.table = "";
            vm.configureTable = function (data) {
                if (vm.table) {
                    vm.table.destroy();
                }
                vm.table = $('#@(Name)').DataTable({
                    "ajax": {
                        "url": "@searchMethod",
                        "type": "POST",
                        "datatype": "json"
                    },
                    "columns":
                        @Html.Raw(JavaScriptBuilder.TableColumns(listVM)),
                    "searching": "true",
                    "serverSide": "true",
                    "order": [0, "asc"],
                    "processing": "true",
                    "language": {
                        "processing": "processing, please wait"
                    },
                    "select": { style: 'multi' },
                    "dom": '<"top"i>rt<"bottom"lp><"clear">'
                });

                $('#@(Name) tbody').on('click', 'tr', function () {
                    var data = vm.table.row($(this)).data();
                    vm.HandleRowSelected(data);
                });

            };

            @Html.Raw(JavaScriptBuilder.SelectListsObservableArray(listVM));

            vm.getEnumItemName = function (myEnum, value) {
                var enumListName = myEnum + "List";
                var enumList = vm[enumListName];
                var n = ko.utils.arrayFirst(enumList(), function (i) {
                    return value === i.id;
                });
                if (n !== undefined) {
                    return n.name;
                }
                else {
                    return "";
                }

            };

            vm.formatDate = function (d) {
                if (d === null || d === undefined) {
                    return "";
                }
                var dateInt = parseInt(d.substring(6, 19));
                var duedate = new Date(dateInt);
                return duedate.toLocaleDateString();
            };

            vm.configureTable();

            vm.HandleRowSelected = function(rowData) {
                try {
                    vm.selectedRow = rowData;
                    @(Name)_HandleRowSelected(rowData);
                    vm.selectedRowList = vm.table.rows({ selected: true });
                } catch (e) { }
            }

            vm.GetSelectedRows = function () {

                var ids = $.map(vm.table.rows({ selected: true }).data(), function (item) {
                    return item.Id;
                });

                return ids;
            }
        }

        $(document).ready(function () {
            @(Name) = new @(Name)();
            //ko.applyBindings(@(Name));
        });

    </script>
}


@helper GenericJavascriptSourcedGrid(System.Web.Mvc.WebViewPage page, object listVM, string Name)
{
    var Html = page.Html;

    <table id="@(Name)" class="table table-striped table-bordered" typeof="display" style="width:100%"></table>

    <script>

        function @(Name)() {

            vm = this;

            vm.data = [];

            @Html.Raw(JavaScriptBuilder.SelectListsArray(listVM));

            vm.getEnumItemName = function (myEnum, id) {
                var enumListName = myEnum + "List";
                var enumList = vm[enumListName];
                var n = "";
                for (var i = 0; i < enumList.length; i++) {
                    if (enumList[i].id === id) {
                        n = enumList[i];
                    }
                }
                return n.name;
            };

            vm.getEnumItemId = function (myEnum, name) {
                var enumListName = myEnum + "List";
                var enumList = vm[enumListName];
                var n = "";
                for (var i = 0; i < enumList.length; i++) {
                    if (enumList[i].name === name) {
                        n = enumList[i];
                    }
                }
                return n.id;
            };

            vm.table = $('#@(Name)').DataTable({
                data: vm.data,
                columns: @Html.Raw(JavaScriptBuilder.TableColumns(listVM)),
                paging: false,
                ordering: false,
                info: false,
                searching: false,
                select: { style: 'multi' }
            });

            vm.loadTable = function (newData) {

                var table = $("#@(Name)").DataTable();
                table.clear();
                table.rows.add(newData).draw();
            }

            vm.GetSelectedRows = function () {

                var table = $("#@(Name)").DataTable();
                var rows = table.rows('.selected').data();
                return rows;
            }
        }

        @Name = new @(Name)();

        $(document).ready(function () {
            @(Name).table;
        });

    </script>
}

@helper GenericEditableGrid(System.Web.Mvc.WebViewPage page, object listVM, string Name)
{
    var Html = page.Html;

    <table id="@(Name)" class="table table-borderless" typeof="display" style="width:100%">
        <thead>
            <tr>
                <th>Line #</th><th>Qty Required</th><th>Item Number</th><th>Description</th><th>Reference</th>
            </tr>
        </thead>
        <tbody data-bind="foreach: ItemList">
            <tr>
                <td><input style="max-width:100%" data-bind="value: LineNumber" class="form-control" /></td>
                <td><input style="max-width:100%" data-bind="value: Qty" class="form-control" /></td>
                <td><input style="max-width:100%" data-bind="value: Code" class="form-control" /></td>
                <td><input style="max-width:100%" data-bind="value: Description" class="form-control" /></td>
                <td><input style="max-width:100%" data-bind="value: Reference" class="form-control" /></td>
            </tr>
        </tbody>
    </table>

    <script>

        function AssemblyItemVM(assemblyItemId, assemblyId, itemId, lineNumber, qty, code, description, reference) {
            var self = this;
            self.AssemblyItemId = ko.observable(assemblyItemId);
            self.AssemblyId = ko.observable(assemblyId);
            self.ItemId = ko.observable(itemId);
            self.LineNumber = ko.observable(lineNumber);
            self.Qty = ko.observable(qty);
            self.Code = ko.observable(code);
            self.Description = ko.observable(description);
            self.Reference = ko.observable(reference);
        }

        function @(Name)() {

            vm = this;

            vm.data = [];

            vm.ItemList = ko.observableArray([]);

            vm.AddLineItem = function(){

                @(Name).ItemList.push(new AssemblyItemVM());
            }

            @*@Html.Raw(JavaScriptBuilder.SelectListsArray(listVM));

            vm.getEnumItemName = function (myEnum, id) {
                var enumListName = myEnum + "List";
                var enumList = vm[enumListName];
                var n = "";
                for (var i = 0; i < enumList.length; i++) {
                    if (enumList[i].id === id) {
                        n = enumList[i];
                    }
                }
                return n.name;
            };

            vm.getEnumItemId = function (myEnum, name) {
                var enumListName = myEnum + "List";
                var enumList = vm[enumListName];
                var n = "";
                for (var i = 0; i < enumList.length; i++) {
                    if (enumList[i].name === name) {
                        n = enumList[i];
                    }
                }
                return n.id;
            };*@

            @*vm.table = $('#@(Name)').DataTable({
                data: vm.data,
                columns: @Html.Raw(JavaScriptBuilder.TableColumns(listVM)),
                paging: false,
                ordering: false,
                info: false,
                searching: false,
                select: { style: 'multi' }
            });*@

            vm.loadTable = function (newData) {

                @(Name).ItemList([]);

                for (var i = 0; i < newData.length; i++) {
                    @(Name).ItemList.push(newData[i]);
                }
            }

            @*vm.GetSelectedRows = function () {

                var table = $("#@(Name)").DataTable();
                var rows = table.rows('.selected').data();
                return rows;
            }*@
        }

        @Name = new @(Name)();

        $(document).ready(function () {
            @*@(Name).table;*@

        });

        ko.applyBindings(@(Name));

    </script>
}