
@using System.Web.Mvc;
@using System.Web.Mvc.Html;
@using Application.Items;
@using System.ComponentModel;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;
@using System;

@helper DetailsFromModel(object detailVM, System.Web.Mvc.WebViewPage page)
{

var Html = page.Html;
var _detailVM = detailVM;

var methodNames = new List<string>();
var childNames = new List<string>();

    <div id="validationSummary">
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
    </div>

    <form id="addeditform">
        <div class="card-body" data-bind="with:Item">
            <div class="row" style="margin-bottom:5mm; margin-right:5mm">
                @{ 
                    var properties = from property in _detailVM.GetType().GetProperties()
                                     where Attribute.IsDefined(property, typeof(DisplayAttribute))
                                     orderby ((DisplayAttribute)property
                                             .GetCustomAttributes(typeof(DisplayAttribute), false)
                                             .Single()).Order
                                     select property;
                }

                @foreach (var p in properties)
                {
                    var displayName = p.Name;
                    var displayAttr = p.GetCustomAttribute(typeof(DisplayAttribute)) as DisplayAttribute;
                    if (displayAttr != null)
                    {
                        displayName = displayAttr.Name;
                    }

                    var hidden = false;
                    var hiddenInput = p.GetCustomAttribute(typeof(HiddenInputAttribute)) as HiddenInputAttribute;
                    if (hiddenInput != null)
                    {
                        hidden = !hiddenInput.DisplayValue;
                    }

                    if (hidden)
                    {
                        <input name=@p.Name type="hidden" data-bind="value: @p.Name" />
                    }

                    if (hidden)
                    { continue; }

                    var readOnly = false;
                    var readOnlyAttr = p.GetCustomAttribute(typeof(ReadOnlyAttribute)) as ReadOnlyAttribute;
                    if (readOnlyAttr != null)
                    {
                        readOnly = readOnlyAttr.IsReadOnly;
                    }

                    if (p.PropertyType == typeof(string))
                    {
                        <div class="camm-control-group">

                            @Html.Label(p.Name, displayName, new { @class = "control-label" })
                            @Html.Editor(p.Name, new { htmlAttributes = new { @class = "form-control col-sm-12", @data_bind = "value: " + p.Name + ", enable: $parent.enableEditableTextBoxes" } })
                            @Html.ValidationMessage(p.Name, "", new { @class = "text-danger", @style = "width: 100%; text-align:center;" })

                        </div>
                    }

                    if (p.PropertyType.BaseType == typeof(Enum))
                    {
                        var enumList = "$parent." + p.PropertyType.Name + "List";
                        <div class="camm-control-group">

                            @Html.Label(p.Name, displayName, new { @class = "control-label" })
                            <select class="form-control" data-bind="options: @enumList, optionsText: 'name', optionsValue: 'id', value: @p.Name, enable: $parent.enableEditableTextBoxes"></select>
                            @Html.ValidationMessage(p.Name, "", new { @class = "text-danger", @style = "width: 100%; text-align:center;" })

                        </div>
                    }


                    if (p.PropertyType == typeof(int))
                    {
                        <div class="camm-control-group-sm">

                            @Html.Label(p.Name, displayName, new { @class = "control-label" })
                            @Html.Editor(p.Name, new { htmlAttributes = new { @class = "form-control", @type = "number", @data_bind = "value:" + p.Name + ", enable: $parent.enableEditableTextBoxes" } })
                            @Html.ValidationMessage(p.Name, "", new { @class = "text-danger", @style = "width: 100%; text-align:center;" })

                        </div>
                    }

                    if (p.PropertyType == typeof(DateTime))
                    {
                        <div class="camm-control-group">
                            <label class="control-label" for="@p.Name">@displayName</label>
                            <input class="form-control datepicker" data-bind="value: @p.Name, enable: @if (readOnly)
                            { <text>false</text> }
                            else
                            { <text>$parent.enableEditableTextBoxes</text> } "
                                   data-val="true" data-val-date="The field @displayName must be a date." data-val-required="The @displayName field is required."
                                   id="@p.Name" name="@p.Name" value="" disabled="" type="datetime">
                            <span class="field-validation-valid text-danger" data-valmsg-for="@p.Name" data-valmsg-replace="true" style="width: 100%; text-align:center;"></span>
                        </div>
                    }

                    if (p.PropertyType.Name.Contains("List"))
                    {
                        var buttonName = "ShowChild" + p.Name + "Btn";
                        var methodName = "ShowChild" + p.Name + "()";
                        methodNames.Add(methodName);

                        <div class="camm-control-group-sm">
                            <label class="control-label" for="@buttonName">@displayName</label>
                            <button type="button" class="btn btn-primary btn-block" id="@buttonName" name="@buttonName" onclick="@methodName">Open @p.Name List</button>
                        </div>
                    }

                }
            </div>
        </div>
    </form>

    <style>
        .camm-control-group {
            margin-bottom: 20px;
        }
    </style>

    <script>

@foreach (var methodName in methodNames)
{
    var parentType = _detailVM.GetType().Name.Replace("DetailVM", "");
    var childType = methodName.Replace("ShowChild", "").Replace("()", "").TrimEnd('s');
    var actionUrl = "/" + childType + "/Linked?type=" + parentType + "&id=\" + vm.ID + \"&code=\" + vm.Code\"";

        <text>

    function @methodName {
        var url = @Html.Raw("\"/" + childType + "/Linked?type=" + parentType + "&id=\" + Itemmodel.Item.Id() + \"&code=\" + Itemmodel.Item.Code()")
        window.location.href = url;
    }

        </text>
}
        $(document).ready(function () {
            $(".camm-control-group").addClass("col-lg-3 col-md-4 col-sm-6");
            $(".camm-control-group-sm").addClass("col-lg-2 col-md-4 col-sm-6");
        });
    </script>
}
