@model Application.ViewModels.UploadDocumentsVM
@using Application.Service
@using Presentation

@{
    ViewBag.Title = "Document";
    var detailVM = new DocumentDetailVM();
    var listVM = new DocumentListVM();
}

<div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with button groups" style="width:100%; padding-top: 15px">
    <div class="input-group">
        <h5 style="padding-top: 7px">UPLOAD DOCUMENTS</h5>
    </div>
    <div class="input-group" style="padding-top:5px">
        <div class="input-group" aria-label="First group">
            <button type="button" class="btn btn-outline-primary" style="margin-right:10px">Back</button>
            <button onclick="UploadDocuments.SaveChanges()" type="button" class="btn btn-outline-primary" style="margin-right:10px">Save</button>
        </div>
        <div class="input-group">
            <div class="input-group-prepend">
                <button onclick="UploadDocuments.SaveChangesAndLink()" class="btn btn-outline-primary" type="button">Save and Link to</button>
            </div>
            <select class="form-control btn-outline-primary" id="inputGroupSelect03">
                @foreach (var item in Model.ItemSelectList)
                {
                    <option value="@item.Value">@item.Text</option>
                }
            </select>
            <div class="input-group-append">
                <input class="form-control btn-outline-primary" type="text" id="myInput" placeholder="Search">
            </div>
        </div>
    </div>
</div>

<div style="padding-top:20px;">
    @CammInputs.DragDropZone(this, "Drawing", "DRAWING drop zone")
    @CammInputs.DragDropZone(this, "PartsList", "PARTS LIST drop zone")
    @CammInputs.DragDropZone(this, "DataSheet", "DATA SHEET drop zone")
    @CammInputs.DragDropZone(this, "MSDS", "MSDS drop zone")
    @CammInputs.DragDropZone(this, "Catalog", "CATALOG drop zone")
</div>
<div id="documentgrid" style="padding-top: 20px; padding-bottom: 20px">
    <table id="uploadsTable">
        <thead>
            <tr>
                <th id="NumberTh">DOCUMENT NUMBER</th>
                <th id="RevTh">REV</th>
                <th id="FileNameTh">FILE NAME</th>
                <th id="CategoryTh">CATEGORY</th>
                <th id="DescriptionTh">DESCRIPTION</th>
            </tr>
        </thead>
        <tbody>
            <tr id="initialRow">
                <td colspan="5">
                    <input type="text" class="form-control Number" style="text-align: center"
                           placeholder="Drag and Drop files onto drop zones above to upload files." />
                </td>
            </tr>
        </tbody>
    </table>
</div>

<script>
       
    var documentList = [];
    var formData = new FormData();

    var rowCount = 0;

    function UploadDocuments() {
        vm = this;

        @Html.Raw(JavaScriptBuilder.SelectListsArray(listVM));

        vm.getEnumItemId = function (myEnum, name) {
            var enumListName = myEnum + "List";
            var enumList = vm[enumListName];
            var n = "";
            for (var i = 0; i < enumList.length; i++) {
                if (enumList[i].name === name) {
                    n = enumList[i];
                }
            }
            return n.id;
        };

        vm.getEnumItemName = function (myEnum, id) {
            var enumListName = myEnum + "List";
            var enumList = vm[enumListName];
            var n = "";
            for (var i = 0; i < enumList.length; i++) {
                if (enumList[i].id === id) {
                    n = enumList[i];
                }
            }
            return n.name;
        };

        vm.SaveChanges = function () {

            var revisedDocuments = [];

            for (i = 0; i < rowCount; i++) {
                var rowIndex = i;

                var id = $("#row" + rowIndex + " .Id").val();
                var number = $("#row" + rowIndex + " .Number").val();
                var rev = $("#row" + rowIndex + " .Rev").val();
                var filename = $("#row" + rowIndex + " .FileName").val();
                var category = $("#row" + rowIndex + " .Category").val();
                var description = $("#row" + rowIndex + " .Description").val();

                var document = new Document(id, number, rev, filename, category, description);

                revisedDocuments.push(document);
            }

            $.ajax({
                url: "UpdateDocuments",
                data: JSON.stringify(revisedDocuments),
                type: "POST",
                dataType: "json",
                contentType: "application/json",
                success: function (updatedDocs) {
                    alert("Save successful.");
                },
                error: function (response) {
                    alert("Error saving edits.");
                }
            });
        }
    }

    var UploadDocuments = new UploadDocuments();

    function HandleFileDrop(files, category) {

        if (files.length > 0) {

            IdentifyDuplicateNames(files, category);
        }
    }

    function IdentifyDuplicateNames(files, category) {

        var fileNames = [];

        for (i = 0; i < files.length; i++) {

            fileNames.push(files[i].name)
        }

        $.ajax({
            url: "IdentifyDuplicateNames",
            data: JSON.stringify({ fileNames:fileNames }),
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            success: function (duplicates) {
                HandleDuplicateNames(duplicates, files, category);
            },
            error: function (response) {
                alert("Error identifying duplicate names.");
            }
        });
    }

    function HandleDuplicateNames(names, files, category) {

        var cleanFiles = ReplaceDuplicateNamesWithUniqueNames(names, files);

        CreateDocumentList(cleanFiles, category);

        AddFilesToFormData(cleanFiles);

        UploadFiles();
    }

    function ReplaceDuplicateNamesWithUniqueNames(names, files) {

        var updatedFiles = [];

        for (var i = 0; i < names.length; i++) {

            for (var f = 0; f < files.length; f++) {

                if (files[f].name = names[i].Duplicate) {
                    var blob = files[f];
                    newFile = new File([blob], names[i].Unique, { type: blob.type });
                    updatedFiles.push(newFile);
                }
                else {
                    updatedFiles.push(files[f]);
                }
            }
        }

        return updatedFiles;
    }

    function CreateDocumentList(files, category) {

        for (i = 0; i < files.length; i++) {

            var document = {
                FileData: files[i],
                Category: category,
                Number: files[i].name,
                Rev: "",
                Description: files[i].name
            }

            var categoryId = UploadDocuments.getEnumItemId("DocumentType", category);
            var doc = new Document(0, "", "", files[i].name, categoryId, "");

            documentList.push(doc);
        }
    }

    function AddFilesToFormData(files) {

        for (i = 0; i < files.length; i++) {

            formData.append(files[i].name, files[i]);
        }
    }

    function UploadFiles() {

        $.ajax({
            type: "POST",
            url: "UploadFiles",
            dataType: "json",
            contentType: false,
            processData: false,
            data: formData,
            success: function (response) {
                formData = new FormData();
                UpdateDocumentList(documentList, response);
                rowCount = AddRowsToGrid(rowCount, response);
            },
            error: function () {
                formData = new FormData();
                alert("There was an error uploading files!");
            }
        });
    }

    function UpdateDocumentList(clientDocList, serverDocList) {

        for (f = 0; f < serverDocList.length; f++) {

            for (r = 0; r < documentList.length; r++) {

                if (clientDocList[r].FileName == serverDocList[f].FileName) {

                    clientDocList[r].Id = serverDocList[f].Id;
                    clientDocList[r].Code = serverDocList[f].Code;
                    clientDocList[r].Rev = serverDocList[f].Rev;
                    clientDocList[r].Title = serverDocList[f].Title;

                    serverDocList[f].DocType = clientDocList[r].DocType;
                }
            }
        }
    }

    var CategorySelectString = '<select class="form-control Category">' +
        '<option value="1">Drawing</option>' +
        '<option value="2">Parts List</option>' +
        '<option value="3">DataSheet</option>' +
        '<option value="4">MSDS</option>' +
        '<option value="5">Catalog</option>' +
        '</select>'

    function AddRowsToGrid(exisitingRowCount, newDocuments) {

        if (exisitingRowCount === 0 && newDocuments.length > 0) {
            $("#initialRow").remove();
        }

        for (i = 0; i < newDocuments.length; i++) {
            var rowIndex = i + exisitingRowCount;

            $("#uploadsTable > tbody:last-child").append(
                '<tr id="row' + rowIndex + '">' +
                '<td style="display:none;"><input type="text" class="form-control Id" /></td>' +
                '<td><input type="text" class="form-control Number" /></td>' +
                '<td><input type="text" class="form-control Rev" /></td>' +
                '<td><input type="text" class="form-control FileName" /></td>' +
                '<td>' + CategorySelectString + '</td>' +
                '<td><input type="text" class="form-control Description" /></td>' +
                '</tr>');

            $("#row" + rowIndex + " .Id").val(newDocuments[i].Id);
            $("#row" + rowIndex + " .Number").val(newDocuments[i].Code);
            $("#row" + rowIndex + " .Rev").val(newDocuments[i].Rev);
            $("#row" + rowIndex + " .FileName").val(newDocuments[i].FileName);
            $("#row" + rowIndex + " .Category").val(newDocuments[i].DocType);
            $("#row" + rowIndex + " .Description").val(newDocuments[i].Title);
        }

        return exisitingRowCount + newDocuments.length;
    }

    function Document(id, code, rev, fileName, docType, title) {

        this.Id = id;
        this.Code = code;
        this.Rev = rev;
        this.FileName = fileName;
        this.DocType = docType;
        this.Title = title;
    };

    $(document).ready(function () {
        $('#myInput').autocomplete({
            source: '/Connector/GetConnectors'
        });
    });

</script>

<style>

    tr {
        padding-top: 10px;
    }

    table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 7px 7px;
    }

    tbody {
        width: 100%;
    }

    #documentgrid th {
        padding-left: 5px;
    }

    #NumberTh {
        width: 20%;
    }

    .Number {
        min-width: 100%;
    }

    #RevTh {
        width: 5%;
    }

    .Rev {
        min-width: 100%;
    }

    #FileNameTh {
        width: 20%;
    }

    .FileName {
        min-width: 100%;
    }

    #CategoryTh {
        width: 20%;
    }

    .Category {
        min-width: 100%;
    }

    #DescriptionTh {
        width: 35%;
    }

    .Description {
        min-width: 100%;
    }
</style>