@model Application.ViewModels.UploadDocumentsVM
@using Application.Service
@using Presentation

@{
    ViewBag.Title = "Document";
    var detailVM = new DocumentDetailVM();
    var listVM = new DocumentListVM();
}
   
    <div class="form-horizontal" style="padding:0px; margin-top: 10px">
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo01" aria-controls="navbarTogglerDemo01" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarTogglerDemo01">
                <a class="navbar-brand">UPLOAD DOCUMENTS</a>
                <form class="form-inline" style="margin-right:10px">
                    <button onclick="UploadDocuments.SaveChanges()" type="button" class="btn btn-outline-primary" style="margin-right:10px">Save</button>
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <button onclick="UploadDocuments.LinkDocumentsToTypeAndId()" class="btn btn-outline-primary" type="button">Apply Documents to</button>
                        </div>
                        <select class="form-control btn-outline-primary" id="linkToSelect">
                            @foreach (var item in Model.ItemSelectList)
                            {
                                <option value="@item.Value">@item.Text</option>
                            }
                        </select>
                        <div class="input-group-append">
                            <input class="form-control btn-outline-primary" type="text" id="myInput" placeholder="Search" style="min-width: 210px; max-width:840px" onkeypress="this.style.width = ((this.value.length + 1) * 11) + 'px';">
                        </div>
                        <div class="input-group-append">
                            <button type="button" onclick="UploadDocuments.ShowLinkedDocuments()" class="btn btn-outline-primary my-2 my-sm-0">Show Applicable Documents</button>
                        </div>
                    </div>
                </form>
            </div>
        </nav>
    </div>

<div style="padding-top:20px;">
    @CammInputs.DragDropZone(this, "Drawing", "DRAWING drop zone")
    @CammInputs.DragDropZone(this, "PartsList", "PARTS LIST drop zone")
    @CammInputs.DragDropZone(this, "DataSheet", "DATA SHEET drop zone")
    @CammInputs.DragDropZone(this, "MSDS", "MSDS drop zone")
    @CammInputs.DragDropZone(this, "Catalog", "CATALOG drop zone")
</div>
<div id="documentgrid" style="padding-top: 20px; padding-bottom: 20px">
    <table id="uploadsTable">
        <thead>
            <tr>
                <th id="NumberTh">DOCUMENT NUMBER</th>
                <th id="RevTh">REV</th>
                <th id="FileNameTh">FILE NAME</th>
                <th id="CategoryTh">CATEGORY</th>
                <th id="DescriptionTh">DESCRIPTION</th>
            </tr>
        </thead>
        <tbody>
            <tr id="initialRow">
                <td colspan="5">
                    <input type="text" class="form-control Number" style="text-align: center"
                           placeholder="Drag and Drop files onto drop zones above to upload files." />
                </td>
            </tr>
        </tbody>
    </table>
</div>

<script>
       
    var documentList = [];
    var formData = new FormData();

    var rowCount = 0;

    function UploadDocuments() {
        vm = this;

        @Html.Raw(JavaScriptBuilder.SelectListsArray(listVM));

        vm.getEnumItemId = function (myEnum, name) {
            var enumListName = myEnum + "List";
            var enumList = vm[enumListName];
            var n = "";
            for (var i = 0; i < enumList.length; i++) {
                if (enumList[i].name === name) {
                    n = enumList[i];
                }
            }
            return n.id;
        };

        vm.getEnumItemName = function (myEnum, id) {
            var enumListName = myEnum + "List";
            var enumList = vm[enumListName];
            var n = "";
            for (var i = 0; i < enumList.length; i++) {
                if (enumList[i].id === id) {
                    n = enumList[i];
                }
            }
            return n.name;
        };

        vm.LinkDocumentsToTypeAndId = function () {
            var revisedDocuments = vm.GetDocuments();            
            vm.LinkDocuments(revisedDocuments);
        }

        vm.ShowLinkedDocuments = function () {
            var url = '@Url.Action("Linked", "Document")?type=' + linkToType + '&id='+ linkToID + '&code=' + linkToCD;
            //url_redirect(url);
            window.location.href = url;
            //return false;
            //setTimeout(function(){document.location.href = url},500);
            //$(location).attr('href', url);
        }

        function url_redirect(url) {
            var X = setTimeout(function () {
                window.location.replace(url);
                return true;
            }, 300);

            if (window.location = url) {
                clearTimeout(X);
                return true;
            } else {
                if (window.location.href = url) {
                    clearTimeout(X);
                    return true;
                } else {
                    clearTimeout(X);
                    window.location.replace(url);
                    return true;
                }
            }
            return false;
        };

        vm.GetDocuments = function () {

            var revisedDocuments = [];

            for (i = 0; i < rowCount; i++) {
                var rowIndex = i;

                var id = $("#row" + rowIndex + " .Id").val();
                var number = $("#row" + rowIndex + " .Number").val();
                var rev = $("#row" + rowIndex + " .Rev").val();
                var filename = $("#row" + rowIndex + " .FileName").val();
                var category = $("#row" + rowIndex + " .Category").val();
                var description = $("#row" + rowIndex + " .Description").val();

                var document = new Document(id, number, rev, filename, category, description);

                revisedDocuments.push(document);
            }

            return revisedDocuments;
        }

        vm.SaveChanges = function (showSuccessMessage = true) {
            var revisedDocuments = vm.GetDocuments();
            vm.Save(revisedDocuments, showSuccessMessage);
        }

        vm.Save = function (revisedDocuments, showSuccessMessage) {
                       
            $.ajax({
                url: "UpdateDocuments",
                data: JSON.stringify(revisedDocuments),
                type: "POST",
                dataType: "json",
                contentType: "application/json",
                success: function (updatedDocs) {
                    if(showSuccessMessage)
                        alert("Save successful.");
                },
                error: function (response) {
                    alert("Error saving edits.");
                }
            });
        }

        vm.LinkDocuments = function (revisedDocuments) {

            var documentIdList = [];

            for (var i = 0; i < revisedDocuments.length; i++) {
                documentIdList.push(revisedDocuments[i].Id);
            }

            var UploadDocumentsVM = {
                LinkToId: linkToID,
                DocumentIdList: documentIdList
            }

            $.ajax({
                url: "/Document/LinkDocuments",
                data: $.param({ "type": linkToType, "typeId": linkToID, "documentIdList": documentIdList }, true),
                success: function (updatedDocs) {
                    alert("Successfully linked document(s).");
                },
                error: function (response) {
                    alert("Error linking documents.");
                }
            });
        }
    }

    var UploadDocuments = new UploadDocuments();

    function HandleFileDrop(files, category) {

        if (files.length > 0) {

            IdentifyDuplicateNames(files, category);
        }
    }

    function IdentifyDuplicateNames(files, category) {

        var fileNames = [];

        for (i = 0; i < files.length; i++) {

            fileNames.push(files[i].name)
        }

        $.ajax({
            url: "IdentifyDuplicateNames",
            data: JSON.stringify({ fileNames:fileNames }),
            type: "POST",
            dataType: "json",
            contentType: "application/json",
            success: function (duplicates) {
                HandleDuplicateNames(duplicates, files, category);
            },
            error: function (response) {
                alert("Error identifying duplicate names.");
            }
        });
    }

    function HandleDuplicateNames(duplicates, files, category) {

        var cleanFiles = ReplaceDuplicateNamesWithUniqueNames(duplicates, files);

        CreateDocumentList(cleanFiles, category);

        AddFilesToFormData(cleanFiles);

        UploadFiles();
    }

    function ReplaceDuplicateNamesWithUniqueNames(duplicates, files) {

        var updatedFiles = [];        

        for (var f = 0; f < files.length; f++) {

            var uniqueNameFile = files[f];

            for (var d = 0; d < duplicates.length; d++) {

                if (uniqueNameFile.name === duplicates[d].Duplicate) {
                    var blob = files[f];
                    uniqueNameFile = new File([blob], duplicates[d].Unique, { type: blob.type });
                }
            }

            updatedFiles.push(uniqueNameFile);
        }

        return updatedFiles;
    }

    function CreateDocumentList(files, category) {

        for (i = 0; i < files.length; i++) {

            var document = {
                FileData: files[i],
                Category: category,
                Number: files[i].name,
                Rev: "",
                Description: files[i].name
            }

            var categoryId = UploadDocuments.getEnumItemId("DocumentType", category);
            var doc = new Document(0, "", "", files[i].name, categoryId, "");

            documentList.push(doc);
        }
    }

    function AddFilesToFormData(files) {

        for (i = 0; i < files.length; i++) {

            formData.append(files[i].name, files[i]);
        }
    }

    function UploadFiles() {

        $.ajax({
            type: "POST",
            url: "UploadFiles",
            dataType: "json",
            contentType: false,
            processData: false,
            data: formData,
            success: function (response) {
                formData = new FormData();
                UpdateDocumentList(documentList, response);
                rowCount = AddRowsToGrid(rowCount, response);
                UploadDocuments.SaveChanges(false);
            },
            error: function () {
                formData = new FormData();
                alert("There was an error uploading files!");
            }
        });
    }

    function UpdateDocumentList(clientDocList, serverDocList) {

        for (f = 0; f < serverDocList.length; f++) {

            for (r = 0; r < documentList.length; r++) {

                if (clientDocList[r].FileName == serverDocList[f].FileName) {

                    clientDocList[r].Id = serverDocList[f].Id;
                    clientDocList[r].Code = serverDocList[f].Code;
                    clientDocList[r].Rev = serverDocList[f].Rev;
                    clientDocList[r].Title = serverDocList[f].Title;

                    serverDocList[f].DocType = clientDocList[r].DocType;
                }
            }
        }
    }

    var CategorySelectString = '<select class="form-control Category">' +
        '<option value="1">Drawing</option>' +
        '<option value="2">Parts List</option>' +
        '<option value="3">DataSheet</option>' +
        '<option value="4">MSDS</option>' +
        '<option value="5">Catalog</option>' +
        '</select>'

    function AddRowsToGrid(exisitingRowCount, newDocuments) {

        if (exisitingRowCount === 0 && newDocuments.length > 0) {
            $("#initialRow").remove();
        }

        for (i = 0; i < newDocuments.length; i++) {
            var rowIndex = i + exisitingRowCount;

            $("#uploadsTable > tbody:last-child").append(
                '<tr id="row' + rowIndex + '">' +
                '<td style="display:none;"><input type="text" class="form-control Id" /></td>' +
                '<td><input type="text" class="form-control Number" /></td>' +
                '<td><input type="text" class="form-control Rev" /></td>' +
                '<td><input type="text" class="form-control FileName" /></td>' +
                '<td>' + CategorySelectString + '</td>' +
                '<td><input type="text" class="form-control Description" /></td>' +
                '</tr>');

            $("#row" + rowIndex + " .Id").val(newDocuments[i].Id);
            $("#row" + rowIndex + " .Number").val(newDocuments[i].Code);
            $("#row" + rowIndex + " .Rev").val(newDocuments[i].Rev);
            $("#row" + rowIndex + " .FileName").val(newDocuments[i].FileName);
            $("#row" + rowIndex + " .Category").val(newDocuments[i].DocType);
            $("#row" + rowIndex + " .Description").val(newDocuments[i].Title);
        }

        return exisitingRowCount + newDocuments.length;
    }

    function Document(id, code, rev, fileName, docType, title) {

        this.Id = id;
        this.Code = code;
        this.Rev = rev;
        this.FileName = fileName;
        this.DocType = docType;
        this.Title = title;
    };
    var linkToType = "@Model.LinkToType";
    var linkToID = @Model.LinkToId;
    var linkToCD = "@Model.LinkToCD";

    $(document).ready(function () {

        $('#myInput').autocomplete({
            source: '/' + linkToType + '/GetAutoCompleteList',
            select: function (event, ui) {
                this.style.width = ((this.value.length + 1) * 11) + 'px';
                linkToID = ui.item.id;
                linkToCD = ui.item.label;
            }
        });

        $('#linkToSelect').change(function () {
            linkToType = $(this).find("option:selected").attr('value');
            $('#myInput').autocomplete({
                source: '/' + linkToType + '/GetAutoCompleteList'
            });
            $('#myInput').val("");
        });

        $('#linkToSelect').val(linkToType);

        var itemCodeAutocomplete = $('#myInput');
        itemCodeAutocomplete.val(linkToCD);
        itemCodeAutocomplete.css("width", ((linkToCD.length + 1) * 11) + 'px');
    });

</script>

<style>

    tr {
        padding-top: 10px;
    }

    table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 7px 7px;
    }

    tbody {
        width: 100%;
    }

    #documentgrid th {
        padding-left: 5px;
    }

    #NumberTh {
        width: 20%;
    }

    .Number {
        min-width: 100%;
    }

    #RevTh {
        width: 5%;
    }

    .Rev {
        min-width: 100%;
    }

    #FileNameTh {
        width: 20%;
    }

    .FileName {
        min-width: 100%;
    }

    #CategoryTh {
        width: 20%;
    }

    .Category {
        min-width: 100%;
    }

    #DescriptionTh {
        width: 35%;
    }

    .Description {
        min-width: 100%;
    }
</style>