<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".txt" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\..\Application\T4Library.t4" #><#
	var xmlClasses = GetClasses("CAMM2\\CAMM2.Repository\\CAMM2Model.xml");
#>
<#
foreach (var aClass in xmlClasses) 
{
	string className = GetName(aClass);
	if(className == "Base")
		continue;
	string classNamePlural = GetNamePluralVersion(aClass);
	var properties = GetProperties(aClass);	
	var propertiesTypesString = GetPropertiesOfTypeString(aClass);

#>
using System.Collections.Generic;
using Domain;
using Application.Service;

namespace Application.Interfaces
{
    public interface I<#=className#>Service : I<#=className#>ServiceBase 
    {
    }
}
<# 	string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
	
	string fullTargetPath = Path.Combine(templateDirectory, "I" + className + "Service.cs");
	var needServiceInterface = !File.Exists(fullTargetPath);
	if(true)
    {
		SaveOutput(templateDirectory, "I" + className + "Service.cs");
    }
	else
    {
		this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }	
} #>