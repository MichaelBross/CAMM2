<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Reflection" #>
<#@ import namespace="System.Reflection" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ assembly name="C:\Users\micha\source\repos\CAMM2\CAMM2.Repository\bin\Debug\Domain.dll" #>
<#@ import namespace="Domain.Items" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Collections.Generic;
using Domain.Items;
using Domain.Users;
using Domain.Documents;
using Domain.Assemblies;

namespace Application.Interfaces
{
<#
    var item = new Item();
    Type[] typelist = GetTypesInNamespace(Assembly.GetAssembly(item.GetType()), "Domain.Items");
    for (int i = 0; i < typelist.Length; i++)
    {
#>
    public partial interface I<#=typelist[i].Name#>Repository : IRepository<<#=typelist[i].Name#>> 
    {
        IEnumerable<<#=typelist[i].Name#>> Search(SearchParameters searchParams);
    }

<#
    }
#>
}

<#+

    private Type[] GetTypesInNamespace(Assembly assembly, string nameSpace)
    {
        var types = assembly.GetTypes();

        return assembly.GetTypes()
            .Where(t => !String.Equals(t.BaseType.Name, "Enum", StringComparison.Ordinal) && !t.Name.Contains("Base"))
            .ToArray();
    }

 #>